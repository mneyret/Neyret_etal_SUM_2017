Dm = Dm[!is.na(Dm$Cumul_corr),]
Dm$q = NA
Dm$q = cut(Dm$Cumul_corr, 4)
a =     as.numeric(c(
tapply(Dm[Dm$Extreme==0,]
$Cumul_corr, Dm[Dm$Extreme==0,]
$q , sum, na.rm = T)      /sum(Dm[Dm$Extreme==0,]
$Cumul_corr),
tapply(Dm[Dm$Extreme==0,]
$Ruiss, Dm[Dm$Extreme==0,]
$q , sum, na.rm = T)           /sum(Dm[Dm$Extreme==0 ,]
$Ruiss,na.rm = T),
tapply(Dm[Dm$Extreme==0,]
$Tot_Detachment, Dm[Dm$Extreme==0,]
$q , sum, na.rm = T)  /sum(Dm[Dm$Extreme==0,]
$Tot_Detachment,na.rm = T)))
print(round(a, 2))
}
for (i in c(#'M11', 'M12', 'M13', 'YRM11', 'YRM12', 'YRM13', 'OR2I1', 'OR2I2', 'OR2I3', 'OR2S1', 'OR2S2', 'OR2S3'
#,
'M21', 'M22', 'M23', 'YRU1', 'YRU2', 'YRU3', 'OR4I1', 'OR4I2', 'OR4I3', 'OR4S1', 'OR4S2', 'OR4S3'
)){
#print(i)
#print(Dm$Microplot)
Dm = Melt_tot[Melt_tot$Microplot == i,]
Dm = Dm[!is.na(Dm$ID) & Dm$Extreme==0
,]
Dm = Dm[!is.na(Dm$Cumul_corr),]
Dm$q = NA
Dm$q = cut(Dm$Cumul_corr, 4)
a =     as.numeric(c(
tapply(Dm[Dm$Extreme==0,]
$Cumul_corr, Dm[Dm$Extreme==0,]
$q , sum, na.rm = T)      /sum(Dm[Dm$Extreme==0,]
$Cumul_corr),
tapply(Dm[Dm$Extreme==0,]
$Ruiss, Dm[Dm$Extreme==0,]
$q , sum, na.rm = T)           /sum(Dm[Dm$Extreme==0 ,]
$Ruiss,na.rm = T),
tapply(Dm[Dm$Extreme==0,]
$Tot_Detachment, Dm[Dm$Extreme==0,]
$q , sum, na.rm = T)  /sum(Dm[Dm$Extreme==0,]
$Tot_Detachment,na.rm = T)))
print(round(a, 2))
}
table(  Dm$q )
for (i in c(#'M11', 'M12', 'M13', 'YRM11', 'YRM12', 'YRM13', 'OR2I1', 'OR2I2', 'OR2I3', 'OR2S1', 'OR2S2', 'OR2S3'
#,
'M21', 'M22', 'M23', 'YRU1', 'YRU2', 'YRU3', 'OR4I1', 'OR4I2', 'OR4I3', 'OR4S1', 'OR4S2', 'OR4S3'
)){
#print(i)
#print(Dm$Microplot)
Dm = Melt_tot[Melt_tot$Microplot == i,]
Dm = Dm[!is.na(Dm$ID) & Dm$Extreme==0
,]
Dm = Dm[!is.na(Dm$Cumul_corr),]
Dm$q = NA
# Dm$q = cut(Dm$Cumul_corr, 4)
Dm$q = ifelse(Dm$Cumul_corr < 25, '<25',
ifelse(Dm$Cumul_corr < 50, '<50', '>50'))
a =     as.numeric(c(
tapply(Dm[Dm$Extreme==0,]
$Cumul_corr, Dm[Dm$Extreme==0,]
$q , sum, na.rm = T)      /sum(Dm[Dm$Extreme==0,]
$Cumul_corr),
tapply(Dm[Dm$Extreme==0,]
$Ruiss, Dm[Dm$Extreme==0,]
$q , sum, na.rm = T)           /sum(Dm[Dm$Extreme==0 ,]
$Ruiss,na.rm = T),
tapply(Dm[Dm$Extreme==0,]
$Tot_Detachment, Dm[Dm$Extreme==0,]
$q , sum, na.rm = T)  /sum(Dm[Dm$Extreme==0,]
$Tot_Detachment,na.rm = T)))
print(round(a, 2))
}
for (i in c('M11', 'M12', 'M13', 'YRM11', 'YRM12', 'YRM13', 'OR2I1', 'OR2I2', 'OR2I3', 'OR2S1', 'OR2S2', 'OR2S3'
#,
#'M21', 'M22', 'M23', 'YRU1', 'YRU2', 'YRU3', 'OR4I1', 'OR4I2', 'OR4I3', 'OR4S1', 'OR4S2', 'OR4S3'
)){
#print(i)
#print(Dm$Microplot)
Dm = Melt_tot[Melt_tot$Microplot == i,]
Dm = Dm[!is.na(Dm$ID) & Dm$Extreme==0
,]
Dm = Dm[!is.na(Dm$Cumul_corr),]
Dm$q = NA
# Dm$q = cut(Dm$Cumul_corr, 4)
Dm$q = ifelse(Dm$Cumul_corr < 25, '<25',
ifelse(Dm$Cumul_corr < 50, '<50', '>50'))
a =     as.numeric(c(
tapply(Dm[Dm$Extreme==0,]
$Cumul_corr, Dm[Dm$Extreme==0,]
$q , sum, na.rm = T)      /sum(Dm[Dm$Extreme==0,]
$Cumul_corr),
tapply(Dm[Dm$Extreme==0,]
$Ruiss, Dm[Dm$Extreme==0,]
$q , sum, na.rm = T)           /sum(Dm[Dm$Extreme==0 ,]
$Ruiss,na.rm = T),
tapply(Dm[Dm$Extreme==0,]
$Tot_Detachment, Dm[Dm$Extreme==0,]
$q , sum, na.rm = T)  /sum(Dm[Dm$Extreme==0,]
$Tot_Detachment,na.rm = T)))
print(round(a, 2))
}
table(Dm$q)
ggplot(Melt_tot, aes(Cumul_corr, Extreme, color = Melt_tot>50)) + geom_point() + facet_wrap(~Year)
ggplot(Melt_tot, aes(Cumul_corr, Extreme, color = Melt_tot>50)) + geom_point() + facet_wrap(~Yr)
ggplot(Melt_tot, aes(Cumul_corr, Extreme, color = Melt_tot$Cumul_corr>50)) + geom_point() + facet_wrap(~Yr)
Dm$q
Melt_tot$Cumul_corr
ggplot(Melt_tot, aes(Cumul_corr, Extreme, color = Melt_tot[Melt_tot$Microplot == i,]$Cumul_corr>50)) + geom_point() + facet_wrap(~Yr)
ggplot(Melt_tot[Melt_tot$Microplot == i,], aes(Cumul_corr, Extreme, color = Melt_tot[Melt_tot$Microplot == i,]$Cumul_corr>50)) + geom_point() + facet_wrap(~Yr)
ggplot(Melt_tot[Melt_tot$Microplot == i,], aes(Cumul_corr, Extreme, color =Cumul_corr>50)) + geom_point() + facet_wrap(~Yr)
for (i in c(#'M11', 'M12', 'M13', 'YRM11', 'YRM12', 'YRM13', 'OR2I1', 'OR2I2', 'OR2I3', 'OR2S1', 'OR2S2', 'OR2S3'
#,
'M21', 'M22', 'M23', 'YRU1', 'YRU2', 'YRU3', 'OR4I1', 'OR4I2', 'OR4I3', 'OR4S1', 'OR4S2', 'OR4S3'
)){
#print(i)
#print(Dm$Microplot)
Dm = Melt_tot[Melt_tot$Microplot == i,]
Dm = Dm[!is.na(Dm$ID) & Dm$Extreme==0
,]
Dm = Dm[!is.na(Dm$Cumul_corr),]
Dm$q = NA
# Dm$q = cut(Dm$Cumul_corr, 4)
Dm$q = ifelse(Dm$Cumul_corr < 25, '<25',
ifelse(Dm$Cumul_corr < 50, '<50', '>50'))
a =     as.numeric(c(
tapply(Dm[Dm$Extreme==0,]
$Cumul_corr, Dm[Dm$Extreme==0,]
$q , sum, na.rm = T)      /sum(Dm[Dm$Extreme==0,]
$Cumul_corr),
tapply(Dm[Dm$Extreme==0,]
$Ruiss, Dm[Dm$Extreme==0,]
$q , sum, na.rm = T)           /sum(Dm[Dm$Extreme==0 ,]
$Ruiss,na.rm = T),
tapply(Dm[Dm$Extreme==0,]
$Tot_Detachment, Dm[Dm$Extreme==0,]
$q , sum, na.rm = T)  /sum(Dm[Dm$Extreme==0,]
$Tot_Detachment,na.rm = T)))
print(round(a, 2))
}
table(Dm$Eq)
table(Dm$q)
ggplot(Melt_tot[Melt_tot$Microplot == 'YRU3',], aes(Cumul_corr, Extreme, color =Cumul_corr>50)) + geom_point() + facet_wrap(~Yr)
Melt_tot[Melt_tot$Yr == "2015",]$Cumul_since_last_event>5
sum(Melt_tot[Melt_tot$Yr == "2015",]$Cumul_since_last_event>5, na.rm = T)
Melt_tot[Melt_tot$Yr == "2015",]$Cumul_since_last_event>5
sum(Melt_tot[Melt_tot$Yr == "2015" &Melt_tot$Microplot = "M11" ,]$Cumul_since_last_event>5, na.rm = T)
sum(Melt_tot[Melt_tot$Yr == "2015" &Melt_tot$Microplot == "M11" ,]$Cumul_since_last_event>5, na.rm = T)
sum(Melt_tot[Melt_tot$Yr == "2015" &Melt_tot$Microplot == "M11" ,]$Cumul_since_last_event>5, na.rm = T)
Data_2015<- read_excel("~/Desktop/Projet_M2/Data/Analysis/Data/Erosion microplots/2015 Meteo_HuayLang_rain2.xls")
Data_2016<- read_excel("~/Desktop/Projet_M2/Data/Analysis/Data/Erosion microplots/2016 Meteo_HuayLang_rain3.xls")
All_es <- read.csv("~/Desktop/Projet_M2/Data/Raw_data/Microplot_erosion/All_Ã©tat_surface.csv", sep='\t')
Data_2015 = Data_2015[is.na(Data_2015$Date) == FALSE,]
Data_2016 = Data_2016[is.na(Data_2016$Date) == FALSE,]
Data_2015$Correc.ACC = ifelse(!is.na(Data_2015$ACC1), Data_2015$ACC1 / Data_2015$Cumul_since_last_event,1)
Data_2015$Correc.RTC = ifelse(!is.na(Data_2015$RTC), Data_2015$RTC  / Data_2015$Cumul_since_last_event, 1)
Data_2015$All_manual_ok = ifelse(abs(Data_2015$ACC1- Data_2015$Cumul_since_last_event) / Data_2015$Cumul_since_last_event <0.5 &
abs(Data_2015$RTC- Data_2015$Cumul_since_last_event) / Data_2015$Cumul_since_last_event <0.5, 1, 0   )
Data_2016$All_manual_ok = 1
COMP = Data_2015[, c('Date', 'ACC1', 'RTC', 'Cumul_since_last_event')]#, 'Correc.ACC', 'Correc.RTC')]
COMP[is.na(COMP$Cumul_since_last_event),]$Cumul_since_last_event = 0
COMP$ACCsimilar = abs(COMP$ACC1 - COMP$Cumul_since_last_event) / COMP$Cumul_since_last_event
COMP$ACCok = ifelse(COMP$ACCsimilar < 0.5, 1, 0 )
COMP$RTCsimilar = abs(COMP$RTC - COMP$Cumul_since_last_event) / COMP$Cumul_since_last_event
COMP$RTCok = ifelse(COMP$RTCsimilar < 0.5, 1, 0 )
COMP$Allok = (COMP$RTCok + COMP$ACCok == 2)
COMP$Month = COMP$Date  %>%
as.Date(origin = "1900-01-01")  %>%
format(format = '%y%m')
COMP$Day = COMP$Date  %>%
as.Date(origin = "1900-01-01")
Data_2015$Coeff.1 = rowSums(Data_2015[, colnames(Data_2015)[grepl("Ruiss", colnames(Data_2015))]] > Data_2015$Cumul_since_last_event)
Data_2015$keepdetach = apply(Data_2015[, colnames(Data_2015)[grepl("Detach", colnames(Data_2015)) & ! grepl("DetachTot", colnames(Data_2015))]],
1,
function(x){length(x[x>0 & !is.na(x)])}) > 6
Meteo_2015 = Data_2015[,c("ID", "Date", "API_2", "API_eventstart" ,'Cumul','All_manual_ok', "Cumul_since_last_event", 'max_meanInt',"max_EI30_since_last_event", "Sum_EC_since_last_event", 'Correc.ACC', 'Correc.RTC', 'Coeff.1', 'keepdetach')]
Ruiss_only = Data_2015[, colnames(Data_2015)[grepl("Ruiss", colnames(Data_2015))]]
Some_ruiss = rowSums(Ruiss_only, na.rm = T)
Some_ruiss
Ruiss_only = Data_2015[, colnames(Data_2015)[grepl("Ruiss", colnames(Data_2015))]]
Some_ruiss = rowSums(Ruiss_only, na.rm = T)
Rain_2015 = Data_2015#[Some_ruiss>0,]
Ruiss_2015 = melt(data.frame(Rain_2015[ , c('ID', colnames(Data_2015)[grepl("Ruiss", colnames(Data_2015))])])
, id.var = 'ID', value.name = 'Ruiss', variable.name = 'Microplot')
Ruiss_2015$Microplot = gsub('Ruiss_', '', Ruiss_2015$Microplot)
Sediments_2015 = melt(Rain_2015[,c('ID', colnames(Data_2015)[grepl("Detach", colnames(Data_2015)) & ! grepl("DetachTot", colnames(Data_2015))])]
, id.var = 'ID', value.name = 'Detachment', variable.name = 'Microplot')
Sediments_2015$Microplot = gsub('Detach_', '', Sediments_2015$Microplot)
Tot_det_2015 = melt(Rain_2015[,c('ID', colnames(Data_2015)[grepl("DetachTot", colnames(Data_2015))])]
, id.var = 'ID', value.name = 'Tot_Detachment', variable.name = 'Microplot')
Tot_det_2015$Microplot = gsub('DetachTot_', '', Sediments_2015$Microplot)
K_2015 = melt(Rain_2015[,c('ID', colnames(Data_2015)[grepl("K", colnames(Data_2015)) & ! grepl("Kppm", colnames(Data_2015))])]
, id.var = 'ID', value.name = 'K', variable.name = 'Microplot')
K_2015$Microplot = gsub('TotK_', '', K_2015$Microplot)
P_2015 = melt(Rain_2015[,c('ID', colnames(Data_2015)[grepl("TotP_", colnames(Data_2015)) & ! grepl("Pppm", colnames(Data_2015))])]
, id.var = 'ID', value.name = 'P', variable.name = 'Microplot')
P_2015$Microplot = gsub('TotP_', '', P_2015$Microplot)
Meteo_2015$Month = Meteo_2015$Date  %>%
as.Date(origin = "1900-01-01")  %>%
format(format = '%y%m')
Meteo_2015$Day = Meteo_2015$Date  %>%
as.Date(origin = "1900-01-01")
Melt_2015 = Reduce(function(...) merge(..., all=TRUE), list(Meteo_2015[Meteo_2015$Day > "2015-04-01",],Ruiss_2015, Sediments_2015,P_2015,K_2015, Tot_det_2015))
Crop15 = gsub('[IS]*[1-9]*', '', Melt_2015$Microplot)
Melt_2015$max.EI30_corr = ifelse(Crop15 %in% c('M', 'YRU','YR', 'YRM'), Melt_2015$max_EI30_since_last_event*Melt_2015$Correc.ACC, Melt_2015$max_EI30_since_last_event*Melt_2015$Correc.RTC  )
Melt_2015$Cumul_corr = ifelse(Crop15 %in% c('M', 'YRU','YR', 'YRM'), Melt_2015$Cumul_since_last_event*Melt_2015$Correc.ACC, Melt_2015$Cumul_since_last_event*Melt_2015$Correc.RTC  )
Melt_2015$Sum.EC_corr = ifelse(Crop15 %in% c('M', 'YRU','YR', 'YRM'), Melt_2015$Sum_EC_since_last_event*Melt_2015$Correc.ACC, Melt_2015$Sum_EC_since_last_event*Melt_2015$Correc.RTC  )
Melt_2015$max_meanInt_corr = ifelse(Crop15 %in% c('M', 'YRU','YR', 'YRM'), Melt_2015$max_meanInt*Melt_2015$Correc.ACC, Melt_2015$max_meanInt*Melt_2015$Correc.RTC  )
Melt_2015$Ruiss_corr = Melt_2015$Ruiss
Melt_2015$Coeff = Melt_2015$Ruiss/ Melt_2015$Cumul_since_last_event
Melt_2015$Coeff_corr = Melt_2015$Ruiss/ Melt_2015$Cumul_corr
tapply(Melt_2015$Cumul_corr, Melt_2015$Microplot, sum, na.rm = T)
Melt_2015$Cumul_corr
Melt_2015$Cumul_corr >5
sum(Melt_2015$Cumul_corr >5)
sum(Melt_2015$Cumul_corr >5, na.rm = T)
sum(Melt_2015[Melt_tot$Microplot == "M11"]$Cumul_corr >5, na.rm = T)
sum(Melt_2015[Melt_tot$Microplot == "M11",]$Cumul_corr >5, na.rm = T)
sum(Melt_2015[Melt_tot$Microplot == "M11",]$Cumul_corr >0, na.rm = T)
sum(Melt_2015[Melt_tot$Microplot == "M11",]$Cumul >0, na.rm = T)
sum(Melt_2015[Melt_tot$Microplot == "M11",]$Cumul >5, na.rm = T)
Melt_2015_2 = Melt_2015[Melt_2015$Day > "2015-05-01",]
sum(Melt_2015_2[Melt_tot$Microplot == "M11",]$Cumul >5, na.rm = T)
Meteo_2015$Cumul
Meteo_2015$Cumul>5
sum(Meteo_2015$Cumul>5)
Data_2015<- read_excel("~/Desktop/Projet_M2/Data/Analysis/Data/Erosion microplots/2015 Meteo_HuayLang_rain2.xls")
colnames(Data_2015)
Data_2015$Cumul>5
sum(Data_2015$Cumul>5, na.rm = T)
Data_2015<- read_excel("~/Desktop/Projet_M2/Data/Analysis/Data/Erosion microplots/2015 Meteo_HuayLang_rain2.xls")
warnings()
sum(Melt_2015$Cumul_since_last_event>0.5, na.rm = T)
sum(Melt_2015$Cumul_since_last_event>0.5, na.rm = T)/12
sum(Melt_2015$Cumul_since_last_event>5, na.rm = T)/12
sum(Melt_2015$Cumul>5, na.rm = T)/12
Community =  Plot1m2_community[, tolower(colnames(Plot1m2_community)) %in% tolower(list_herb)]
Field_data = read.csv("Field_Data.csv", sep = '\t')
library(nlme)
library(multcomp)
library(MuMIn)
library(vegan)
library(ade4)
library(Hmisc)
library(lsmeans)
library(car)
library(plyr)
library(cowplot)
library(grid)
Field_data = read.csv("Field_Data.csv", sep = '\t')
setwd("~/Desktop/Projet_M2/Documents/Papers/Paper1_SUM/Code and Data")
Field_data = read.csv("Field_Data.csv", sep = '\t')
Plot1m2_data = read.csv('Plot1m2_Data.csv', sep = '\t')
Plot1m2_community = read.csv('Plot1m2_Community.csv', sep = '\t')
Plot1m2_data$LU = factor(Plot1m2_data$LU, c('ULR', 'M', 'YRM', 'OR'))
Plot1m2_community$LU = factor(Plot1m2_community$LU, c('ULR', 'M', 'YRM', 'OR'))
Slope_per_field = tapply(Plot1m2_data$Slope, Plot1m2_data$Plot, mean) ### check
mean(Plot1m2_data$Bulk_density);sd(Plot1m2_data$Bulk_density)
anova(lme(Bulk_density~LU, data = Plot1m2_data, random = ~1|Field))
mean(Plot1m2_data[Plot1m2_data$LU == 'OR',]$Humidity); sd(Plot1m2_data[Plot1m2_data$LU == 'OR',]$Humidity)
mean(Plot1m2_data[Plot1m2_data$LU != 'OR',]$Humidity); sd(Plot1m2_data[Plot1m2_data$LU != 'OR',]$Humidity)
anova(lme(Humidity~LU, data = Plot1m2_data, random = ~1|Field))
mean(Plot1m2_data$C); sd(Plot1m2_data$C)
mean(Plot1m2_data$N); sd(Plot1m2_data$N)
anova(lme(C~LU, data = Plot1m2_data, random = ~1|Field))
anova(lme(N~LU, data = Plot1m2_data, random = ~1|Field))
anova(lme(N~LU, data = Plot1m2_data, random = ~1|Field))
anova(lme(Bulk_density~C, data = Plot1m2_data, random = ~1|Field))
LU_rice_field = ifelse(Field_data$LU == 'ULR', 'ULR','notULR' )
anova(lm(Richness~LU_rice_field, data = Field_data))
Plot1m2_data$LU_rice = ifelse(Plot1m2_data$LU == 'ULR', 'ULR','notULR' )
summary(lme(Fresh~LU_rice, data = Plot1m2_data, random = ~1|Field))
summary(lme(Living_cover~LU_rice, data = Plot1m2_data, random = ~1|Field, na.action = na.omit))
mod = lme(Litter~LU, data = Plot1m2_data, random = ~1|Field, na.action = na.omit)
summary(glht(mod, linfct = mcp(LU = "Tukey")))
mod = lme(Fresh~Living_cover, data = Plot1m2_data, random = ~1|Field, na.action = na.omit)
mod = lme(Living_cover~Abundance, data = Plot1m2_data, random = ~1|Field, na.action = na.omit)
r.squaredGLMM(mod)
Community =  Plot1m2_community[, tolower(colnames(Plot1m2_community)) %in% tolower(list_herb)]
##### This program creates global matrices from existing data, for later analysis.
wdir = "/Users/margot/Desktop/Projet_M2/Data/Raw_data"
##### Rassemblement des donn??es descriptives de communaut??s.
Plant_type <- read.delim("~/Desktop/Projet_M2/Data/Raw_data/Plantcommunities/code-espece.csv")
Plant_type = Plant_type[Plant_type$Sure == 1,]
list_tot = as.character(Plant_type$Sp)
list_herb = as.character(Plant_type[Plant_type$Type %in% c("herb", 'liana'),]$Sp)
list_non_herb = as.character(Plant_type[Plant_type$Type != "herb",]$Sp)
list_trees = as.character(Plant_type[Plant_type$Type == "tree",]$Sp)
list_trees_liana = as.character(Plant_type[Plant_type$Type %in% c("tree", 'liana'),]$Sp)
## Esp??ces pr??sentes ?? l'??chelle du carr??
community <- read.delim("/Users/Margot/Desktop/Projet_M2/Data/Raw_data/Plantcommunities/Plants_communities_condensed.csv", sep = ",")
colnames(community)[1:9] = c('Plot', 'Date', 'Season', 'Crop', 'Microplot', 'Microplot_id', 'Square_id', 'Positionmicroplot', 'Square')
community[is.na(community) == T] = 0
community = community[with(community, order(Microplot_id)),]
## R??duction ?? l'??chelle du microplot
community_microplot = aggregate(community[, colnames(community) %in% c(tolower(list_herb), 'p.i.')], by=list(community$Microplot_id), sum)
community_microplot$Crop = gsub('[A-z0-9() ]*-[A-z0-9]*-([A-z0-9]*)-[0-9]', '\\1', community_microplot[,1])
community_microplot$Crop = factor(community_microplot$Crop , levels = c('ULR', 'M','MLON', 'YRU','YRM','YR', 'OR', 'LON', 'My'))
community_microplot$Plot_id = gsub('([A-z0-9]*).*-([DR]1[67])-.*', '\\1-\\2', community_microplot[,1])
community_microplot$Season = gsub('.*([RD]1[678]).*', '\\1', community_microplot[,1])
community_microplot$Plot_id  = gsub('H', 'h', community_microplot$Plot_id )
community_microplot$Plot_id  = gsub('Nh', 'nh', community_microplot$Plot_id )
community_microplot$Microplot_id  = gsub('H', 'h', community_microplot$Microplot_id )
community_microplot$Microplot_id  = gsub('Nh', 'nh', community_microplot$Microplot_id )
colnames(community_microplot)[1] = 'Microplot_id'
community_microplot$Date
community_microplot$Day = as.character(gsub('03/','', community_microplot$Date))
community_microplot$Day = as.character(gsub('/2016', '', community_microplot$Day))
community_microplot$Microplot_id = gsub('OR4-R16', 'OR4nh-R16', community_microplot$Microplot_id)
#Com_agg$Crop = factor(Com_agg$Crop , levels = c('ULR', 'M', 'YR', 'OR'))
## R??duction ?? l'??chelle du plot
community_plot = aggregate(community_microplot[colnames(community_microplot) %in% list_herb], list(community_microplot$Plot, community_microplot$Season), sum)
colnames(community_plot)[1] = 'Plot_id'
colnames(community_microplot)
## Cr??e une nouvelle matrice indiquant les abondance, shannon, richesse des esp  sur diff??rents types de plantes
# community_matrix = pr??sence/absence dans chaque unit?? (plot, microplot, carr??), plant_type = vecteur listant les esp??ces pr??sentes, scale = nom de colonne pour l'unit?? (eg Microplot_id)
Div_indices = function(community_matrix, plant_type, scale){
library(vegan)
n = nrow(community_matrix)
Data = data.frame('Scale' = community_matrix[,scale], 'Abundance' = numeric(n), 'Richness' = numeric(n), 'Shannon' = numeric(n))
names(Data)[1] = scale
community_restricted = community_matrix[, colnames(community_matrix) %in% c(plant_type, 'p.i')]
#  print(c(plant_type, 'p.i'))
Data$Abundance = rowSums(community_restricted)
community_restricted = community_matrix[, colnames(community_matrix) %in% c(plant_type)]
Data$Richness = apply(community_restricted, 1, function(x)length(x[as.numeric(x)>0]))
Data$Shannon = apply(community_restricted, 1, function(x){diversity(x, index = "shannon", MARGIN = 1, base = exp(1))   })
Data$Abundance.w2 = rowSums(community_restricted[, !colnames(community_restricted) %in% c("Age.con","Con.sum")])
Data$Abundance.2 = rowSums(community_restricted[, colnames(community_restricted) %in% c("Age.con","Con.sum")])
print(colnames(community_restricted[, !colnames(community_restricted) %in% c("Age.con","Con.sum")]))
Data$Shannon.w2 = apply(community_restricted[, !colnames(community_restricted) %in% c("Age.con","Con.sum")], 1, function(x){
diversity(x, index = "shannon", MARGIN = 1, base = exp(1))   })
return(Data)}
DATA_Square = Div_indices(community, list_herb, 'Square_id')
DATA_Microplot = Div_indices(community_microplot, list_herb, 'Microplot_id')
DATA_Plot = Div_indices(community_plot, list_herb, 'Plot_id')
DATA_Microplot$Day = community_microplot$Day
DATA_Square$Square_id = gsub('-[Hh]','-h',DATA_Square$Square_id)
DATA_Square$Square_id = gsub('-[Nn][Hh]','-nh',DATA_Square$Square_id)
DATA_Square$Square_id = gsub('-[Hh][Pp]','-hp',DATA_Square$Square_id)
DATA_Square$Microplot_id = gsub('-[0-9]*$', '', DATA_Square$Square_id)
DATA_Square$Plot_id = gsub('([A-z0-9]*).*-([DR]1[67])-.*', '\\1-\\2', DATA_Square$Square_id)
DATA_Square$Crop= gsub('[A-z0-9() ]*-[A-z0-9]*-([A-z]*)-.*', '\\1', DATA_Square$Square_id)
# This functions find the scale at which the dataset is.
Scale = function(DATA){
scale = ''
for (j in c('Square_id','Microplot_id', 'Plot_id')) {
if (j %in% colnames(DATA)){
if (identical(DATA[,j],unique(DATA[,j]))) {
scale = j
}} }
return(scale)
}
# Cette fonction ajoute ?? DATA_1 les colonnes col_2 (vecteur des noms) de DATA_2, en moyennant ou dupliquant si besoin
Merge_dataset = function(DATA_1, DATA_2, vars){
s_1 = Scale(DATA_1)
s_2 = Scale(DATA_2)
print(s_1)
print(s_2)
if ( s_1 == s_2){  # case 1 : DATA_1 and DATA_2 already have the same scale unit
DATA_merge = merge(DATA_1, DATA_2[, c(vars, s_2)], by = c(s_1), incomparables = 'NA')}
else {  # case 2 : DATA_1 and DATA_2 don't have the same scale unit
DATA_merge = DATA_1
if (length(unique(DATA_1[, s_1])) > length(unique(DATA_2[,s_2]))) {# DATA_1 has a smaller scale than DATA_2, duplication of DATA_2
for (var1 in vars) {
DATA_merge[, var1] = numeric()
for (i in DATA_2[, s_2]){
DATA_merge[DATA_merge[, s_2] == i, var1] = DATA_2[DATA_2[,s_2] == i, var1]
}}}
else { if   (length(unique(DATA_1[,s_1])) < length(unique(DATA_2[,s_2]))) { # DATA_1 has a larger scale than DATA_2, use mean for DATA_2
for (var1 in vars){
DATA_merge[, var1] = numeric()
for (i in DATA_1[, s_1]){
DATA_merge[DATA_merge[,s_1] == i, var1] = mean(DATA_2[DATA_2[,s_1] == i, var1], na.rm = T)
}
}}}  }
return(DATA_merge)
}
## Adds biomass data
Biomasses <- read.csv(paste(wdir, "/Plantcommunities/Biomass.csv", sep = ''), sep="\t")
#Biomasses$Microplot_id = Biomasses$Plot
#Biomasses$Plot = gsub('-[0-9]', '', Biomasses$Microplot_id)
#Biomasses$Crop = gsub('[0-9]-[0-9]', '', Biomasses$Microplot_id)
Biomasses[, c('Fresh', 'Dry', 'Residues')][Biomasses[, c('Fresh', 'Dry', 'Residues')] < 0] = 0
Data_tot_microplot = Merge_dataset(DATA_Microplot, Biomasses, c('Fresh', 'Dry', 'Residues'))
Data_tot_plot = Merge_dataset(DATA_Plot, Biomasses, c('Fresh', 'Dry', 'Residues'))
Biomasses$Plot
Biomasses$Microplot_id[!Biomasses$Microplot_id %in% DATA_Microplot$Microplot_id]
Data_tot_microplot$Plot = gsub('^([A-z]*[0-9][nhpNHP]*)-.*', '\\1', Data_tot_microplot$Microplot_id)
Data_tot_microplot$Season = gsub('[A-z0-9]*-([DR]1[678])-.*', '\\1', Data_tot_microplot$Microplot_id)
Data_tot_plot$Season = gsub('.*-([DR]1[678])', '\\1', Data_tot_plot$Plot_id)
table(Data_tot_plot$Plot)
## Adds soil cover data
SC =  read.csv(paste(wdir,"/Image analysis/Plant_cover/Results/TOTsoilcov.csv", sep = ''), sep="\t")
SC_new =  read.csv(paste(wdir,"/Image analysis/Plant_cover/Results/TOTsoilcov_new.csv", sep = ''), sep="\t")
Data_tot_microplot = Merge_dataset(Data_tot_microplot, SC_new, c("Plants", "Soil","Litter"))
## Adds soil data
Dens_por <- read.csv(paste(wdir,'/Soil_variables/Soil_data.csv', sep=""), sep = '\t', dec=".")
#colnames(Dens_por)[2]  = 'Microplot_id'
Humidity <- read.csv(paste(wdir,"/Soil_variables/Humidity.csv", sep = ""),sep="\t")
#colnames(Humidity)[c(3,4)] = c('Microplot_id', 'Square_id')
#Humidity$Microplot_id = paste(Humidity$Plot, Humidity$Microplot_id, sep = '-')
#Humidity$Square_id = paste(Humidity$Microplot_id, Humidity$Square_id, sep = '-')
Humidity$Humidity = as.numeric(as.character(Humidity$Humidity ))
Humidity$Microplot_id = gsub(' (young)', '', Humidity$Microplot_id)
Data_tot_Square = Merge_dataset(DATA_Square, Humidity, 'Humidity')
Data_tot_microplot = Merge_dataset(Data_tot_microplot, Dens_por, colnames(Dens_por)[7:ncol(Dens_por)])
Data_tot_microplot = Merge_dataset(Data_tot_microplot, Humidity, 'Humidity')
Data_tot_microplot$Crop = factor(gsub('.*-([A-z]*)-.*', '\\1', Data_tot_microplot$Microplot_id), levels = c('F', 'ULR', 'M', 'YR', 'YRM', 'YRU','LON', 'OR', 'MLON'))
Data_tot_microplot$Plot = gsub('^([A-z]*[0-9][nhpNHP]*)-.*', '\\1', Data_tot_microplot$Microplot_id)
Data_tot_microplot$Plot =  gsub('N', 'n', Data_tot_microplot$Plot); Data_tot_microplot$Plot =  gsub('H', 'h', Data_tot_microplot$Plot)
Data_tot_microplot$Season = gsub('[A-z0-9]*-([DR]1[678])-.*', '\\1', Data_tot_microplot$Microplot_id)
Data_tot_microplot$Plot_id = paste(Data_tot_microplot$Plot,Data_tot_microplot$Season, sep = '-' )
Data_tot_plot = Merge_dataset(Data_tot_plot, Humidity, 'Humidity')
Data_tot_plot = Merge_dataset(Data_tot_plot, CN, c('C','N'))
Data_tot_plot$Crop = gsub('[0-9]-[DR]1[67]', '', Data_tot_plot$Plot_id)#aggregate(community_microplot$Crop,list(community_microplot$Plot_id),unique)[,2]
Data_tot_plot$Season = gsub('.*([DR]1[678]).*', '\\1', Data_tot_plot$Plot_id)
# Exports the table to a final table
write.table(Data_tot_Square, file = "/Users/Margot/Desktop/Projet_M2/Data/Analysis/Data/Square_Data2.csv", append = FALSE, quote = TRUE, sep = " ",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
write.table(Data_tot_microplot, file = "/Users/Margot/Desktop/Projet_M2/Data/Analysis/Data/Microplot_Data2.csv", append = FALSE, quote = TRUE, sep = " ",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
write.table(Data_tot_plot, file = "/Users/Margot/Desktop/Projet_M2/Data/Analysis/Data/Plot_Data2.csv", append = FALSE, quote = TRUE, sep = " ",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
write.table(community_microplot, file = "/Users/Margot/Desktop/Projet_M2/Data/Analysis/Data/Microplot_Community2.csv", append = FALSE, quote = TRUE, sep = " ",
eol = "\n", na = "NA", dec = ".", row.names = TRUE,
col.names = TRUE, qmethod = c("escape", "double"),
fileEncoding = "")
mod = stepAIC(lme(CsurN~(Crop+Season)*Richness, data = Data_tot_microplot, random = ~1|Plot_id, method = 'ML'))
summary(mod)
anova(mod)
Data_tot_microplot$CsurN = Data_tot_microplot$C/Data_tot_microplot$N
list_herb
colnames(Plot1m2_community)
Plot1m2_community = Plot1m2_community[, tolower(colnames(Plot1m2_community)) %in% c(tolower(list_herb), 'Plot1m2', 'LU', 'Field', 'Date')]
Plot1m2_community
Community =  Plot1m2_community#[, tolower(colnames(Plot1m2_community)) %in% tolower(list_herb)]
Community_hellinger = decostand(Community, 'hellinger')
PCA = dudi.pca(Community_hellinger, scannf = FALSE, nf = 4)
BCA = bca(PCA, as.factor(Plot1m2_community$LU), scannf = FALSE, nf = 3)
as.factor(Plot1m2_community$LU)
Plot1m2_community = read.csv('Plot1m2_Community.csv', sep = '\t')
Community =  Plot1m2_community[, tolower(colnames(Plot1m2_community)) %in% c('plot1m2', 'lu', 'field', 'date', tolower(list_herb))]
Community_hellinger = decostand(Community, 'hellinger')
PCA = dudi.pca(Community_hellinger, scannf = FALSE, nf = 4)
Community =  Plot1m2_community[, tolower(colnames(Plot1m2_community)) %in% c('plot1m2', 'lu', 'field', 'date', tolower(list_herb))]
Community_hellinger = decostand(Community, 'hellinger')
Community
Plot1m2_community =  Plot1m2_community[, tolower(colnames(Plot1m2_community)) %in% c('plot1m2', 'lu', 'field', 'date', tolower(list_herb))]
Community = Community[, tolower(colnames(Plot1m2_community)) %in% tolower(list_herb)]
Community_hellinger = decostand(Community, 'hellinger')
PCA = dudi.pca(Community_hellinger, scannf = FALSE, nf = 4)
BCA = bca(PCA, as.factor(Plot1m2_community$LU), scannf = FALSE, nf = 3)
randtest(BCA, 1000, "two-sided")
plot(PCA)
PCA
PCA = dudi.pca(Community_hellinger, scannf = TRUE, nf = 4)
PCA = dudi.pca(Community_hellinger, scannf = FALSE, nf = 5)
BCA = bca(PCA, as.factor(Plot1m2_community$LU), scannf = FALSE, nf = 3)
randtest(BCA, 1000, "two-sided")
PCA = dudi.pca(Community_hellinger, scannf = FALSE, nf = 4)
BCA = bca(PCA, as.factor(Plot1m2_community$LU), scannf = FALSE, nf = 3)
randtest(BCA, 1000, "two-sided")
PCA = dudi.pca(Community_hellinger, scannf = FALSE, nf = 12)
BCA = bca(PCA, as.factor(Plot1m2_community$LU), scannf = FALSE, nf = 3)
randtest(BCA, 1000, "two-sided")
BCA = bca(PCA, as.factor(Plot1m2_community$LU), scannf = FALSE, nf = 4)
randtest(BCA, 1000, "two-sided")
BCA = bca(PCA, as.factor(Plot1m2_community$LU), scannf = FALSE, nf = 10)
randtest(BCA, 1000, "two-sided")
BCA
BCA = bca(PCA, as.factor(Plot1m2_community$LU), scannf = FALSE, nf = 10)
BCA
data(meaudret)
pca1 <- dudi.pca(meaudret$env, scan = FALSE, nf = 4)
pca2 <- dudi.pca(meaudret$spe, scal = FALSE, scan = FALSE, nf = 4)
pca1
plot(pca1)
hist(pca1)
pca2 <- dudi.pca(meaudret$spe, scal = FALSE, scan = FALSE, nf = 4)
pca1 <- dudi.pca(meaudret$env, scan = TRUE, nf = 4)
pca1 <- dudi.pca(meaudret$env, scan = FALSE, nf = 4)
pca2 <- dudi.pca(meaudret$spe, scal = FALSE, scan = FALSE, nf = 4)
bet1 <- bca(pca1, meaudret$design$site, scan = FALSE, nf = 2)
bet1
plot(bet1)
bet1 <- bca(pca1, meaudret$design$site, scan = FALSE, nf = 3)
bet1
bet1 <- bca(pca1, meaudret$design$site, scan = FALSE, nf = 4)
bet1 <- bca(pca1, meaudret$design$site, scan = FALSE, nf = 5)
bet1
PCA = dudi.pca(Community_hellinger, scannf = FALSE, nf = 12)
BCA = bca(PCA, as.factor(Plot1m2_community$LU), scannf = FALSE, nf = 10)
PCA
BCA = bca(PCA, as.factor(Plot1m2_community$LU), scannf = FALSE, nf = 10)
BCA
BCA
plot(BCA)
version()
version
packageVersion("nlme")
packageVersion("ade4")
packageVersion("MuMin")
packageVersion("Psych")
